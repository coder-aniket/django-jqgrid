#!/usr/bin/env python3
"""
Final comprehensive test of the three-column import functionality
"""

import requests
import json

def test_excel_import():
    """Test importing from Excel file"""
    
    mapped_columns = {
        "name": "Name",
        "description": "Description", 
        "active": "Active"
    }
    
    default_values = {}
    
    url = "http://localhost:8000/examples/api/categories/import_data/"
    
    try:
        with open('test_categories.xlsx', 'rb') as f:
            files = {'import_file': f}
            data = {
                'mapped_columns': json.dumps(mapped_columns),
                'default_values': json.dumps(default_values)
            }
            
            response = requests.post(url, files=files, data=data)
            print(f"Excel Import - Status: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print(f"Excel Import - Result: {result}")
                return result.get('status', False)
            
    except Exception as e:
        print(f"Excel Import Error: {e}")
        return False

def test_csv_with_defaults():
    """Test CSV import with default values"""
    
    mapped_columns = {
        "name": "Name",
        "description": "Description"
        # Note: Not mapping "Active" to test default values
    }
    
    default_values = {
        "active": "true"  # Default all to active
    }
    
    url = "http://localhost:8000/examples/api/categories/import_data/"
    
    try:
        with open('test_categories.csv', 'rb') as f:
            files = {'import_file': f}
            data = {
                'mapped_columns': json.dumps(mapped_columns),
                'default_values': json.dumps(default_values)
            }
            
            response = requests.post(url, files=files, data=data)
            print(f"CSV with Defaults - Status: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print(f"CSV with Defaults - Result: {result}")
                return result.get('status', False)
            
    except Exception as e:
        print(f"CSV with Defaults Error: {e}")
        return False

def test_products_import():
    """Test products import with complex data types"""
    
    mapped_columns = {
        "name": "Product Name",
        "sku": "SKU",
        "price": "Price",
        "stock_quantity": "Stock",
        "status": "Status",
        "category": "Category",
        "description": "Description"
    }
    
    default_values = {}
    
    url = "http://localhost:8000/examples/api/products/import_data/"
    
    try:
        with open('test_products.csv', 'rb') as f:
            files = {'import_file': f}
            data = {
                'mapped_columns': json.dumps(mapped_columns),
                'default_values': json.dumps(default_values)
            }
            
            response = requests.post(url, files=files, data=data)
            print(f"Products Import - Status: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print(f"Products Import - Result: {result}")
                return result.get('status', False)
            
    except Exception as e:
        print(f"Products Import Error: {e}")
        return False

def main():
    print("üß™ Final Test of Three-Column Import Functionality")
    print("=" * 60)
    
    tests = [
        ("üìÑ CSV Import Test", test_csv_with_defaults),
        ("üìä Excel Import Test", test_excel_import), 
        ("üè∑Ô∏è  Products Import Test", test_products_import),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{test_name}")
        print("-" * 40)
        
        try:
            if test_func():
                print("‚úÖ PASSED")
                passed += 1
            else:
                print("‚ùå FAILED")
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
    
    print(f"\nüìä Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All import functionality tests PASSED!")
        print("\nüìã Summary of Features Implemented:")
        print("   ‚úÖ Three-column import interface (System Fields | File Headers | Default Values)")
        print("   ‚úÖ CSV file processing with header mapping")
        print("   ‚úÖ Excel file processing (XLSX support)")
        print("   ‚úÖ Default value assignment for unmapped fields")
        print("   ‚úÖ Data type conversion (boolean, decimal, integer)")
        print("   ‚úÖ Foreign key resolution (category names)")
        print("   ‚úÖ Duplicate button issue resolved")
        print("   ‚úÖ Dynamic import/export buttons in toolbar")
        print("   ‚úÖ Select2 dropdowns for better UX")
        print("   ‚úÖ Comprehensive error handling")
    else:
        print("‚ö†Ô∏è  Some tests failed. Check the output above.")

if __name__ == "__main__":
    main()